doctype html
html(lang="fr")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title #{product.denomination_medicament} - Détails du médicament
    link(rel="stylesheet", href="/css/style.css")
    link(rel="stylesheet", href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css")
    script(src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js")

  body
    a.back-button(href="/") Retour à la recherche
    
    .product-header
      h1= product.denomination_medicament
    
    .product-details
      .detail-section
        h2 Informations générales
        p
          span.label Code CIS : 
          span= product.id
        p
          span.label Présentation : 
          span= product.libelle_presentation
        if product.active_ingredients
          p
            span.label Substance(s) active(s) : 
            span= product.active_ingredients

      .detail-section
        h2 Trouver en pharmacie
        .pharmacy-selector
          label(for="pharmacy") Sélectionner une pharmacie :
          select#pharmacy.pharmacy-select(name="pharmacy")
            option(value="") -- Choisir une pharmacie --
            if pharmacies && pharmacies.length
              each pharmacy in pharmacies
                option(
                  value=pharmacy.raison_sociale
                  data-lat=pharmacy.latitude
                  data-lng=pharmacy.longitude
                  data-address=`${pharmacy.adresse}, ${pharmacy.code_postal} ${pharmacy.ville}`
                  data-dept=pharmacy.departement
                )= `${pharmacy.raison_sociale} (${pharmacy.departement})`
        
        #pharmacy-details.pharmacy-details(style="display: none;")
          p#pharmacy-name.pharmacy-name
          p#pharmacy-address.pharmacy-address
          p#pharmacy-location
          
          .radius-control
            label(for="radius") Rayon de recherche : 
              span#radius-value 5
              |  km
            input#radius(
              type="range"
              min="1"
              max="20"
              value="5"
              step="1"
            )
          
          .nearby-pharmacies
            h3 Pharmacies à proximité
            #nearby-list.nearby-list
        
        #map.pharmacy-map

    script.
      // Initialize map
      const map = L.map('map').setView([46.603354, 1.888334], 6);
      const markers = L.layerGroup().addTo(map);
      
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '© OpenStreetMap contributors'
      }).addTo(map);
      
      let currentMarker = null;
      
      // Update nearby pharmacies
      async function updateNearbyPharmacies(lat, lng, radius) {
        try {
          const response = await fetch(`/api/nearby-pharmacies?lat=${lat}&lng=${lng}&radius=${radius}`);
          const pharmacies = await response.json();
          
          // Clear existing markers
          markers.clearLayers();
          
          // Add marker for selected pharmacy
          currentMarker = L.marker([lat, lng])
            .bindPopup('<strong>Pharmacie sélectionnée</strong>')
            .addTo(markers);
          
          // Update nearby list
          const nearbyList = document.getElementById('nearby-list');
          nearbyList.innerHTML = pharmacies
            .filter(p => p.distance_km > 0) // Exclude selected pharmacy
            .map(p => `
              <div class="nearby-item">
                <strong>${p.raison_sociale}</strong>
                <div>${p.adresse}</div>
                <div>${p.code_postal} ${p.ville}</div>
                <div class="distance">${p.distance_km.toFixed(1)} km</div>
              </div>
            `)
            .join('');
          
          // Add markers for nearby pharmacies
          pharmacies.forEach(p => {
            if (p.distance_km > 0) { // Exclude selected pharmacy
              L.marker([p.latitude, p.longitude])
                .bindPopup(`
                  <strong>${p.raison_sociale}</strong><br>
                  ${p.adresse}<br>
                  ${p.code_postal} ${p.ville}<br>
                  <em>${p.distance_km.toFixed(1)} km</em>
                `)
                .addTo(markers);
            }
          });
          
          // Fit map bounds to show all markers
          const bounds = L.featureGroup(markers.getLayers()).getBounds();
          map.fitBounds(bounds, { padding: [50, 50] });
          
        } catch (error) {
          console.error('Error fetching nearby pharmacies:', error);
        }
      }
      
      // Handle pharmacy selection
      document.getElementById('pharmacy').addEventListener('change', function() {
        const selectedOption = this.options[this.selectedIndex];
        const details = document.getElementById('pharmacy-details');
        const nameElement = document.getElementById('pharmacy-name');
        const addressElement = document.getElementById('pharmacy-address');
        const locationElement = document.getElementById('pharmacy-location');
        
        if (this.value) {
          const lat = parseFloat(selectedOption.dataset.lat);
          const lng = parseFloat(selectedOption.dataset.lng);
          const address = selectedOption.dataset.address;
          const dept = selectedOption.dataset.dept;
          
          // Update pharmacy details
          details.style.display = 'block';
          nameElement.textContent = this.value;
          addressElement.textContent = address;
          locationElement.textContent = `Département : ${dept}`;
          
          // Update nearby pharmacies
          const radius = document.getElementById('radius').value;
          updateNearbyPharmacies(lat, lng, radius);
          
        } else {
          details.style.display = 'none';
          markers.clearLayers();
          map.setView([46.603354, 1.888334], 6);
        }
      });
      
      // Handle radius change
      document.getElementById('radius').addEventListener('input', function() {
        const selectedOption = document.getElementById('pharmacy').options[
          document.getElementById('pharmacy').selectedIndex
        ];
        
        if (selectedOption.value) {
          const lat = parseFloat(selectedOption.dataset.lat);
          const lng = parseFloat(selectedOption.dataset.lng);
          
          document.getElementById('radius-value').textContent = this.value;
          updateNearbyPharmacies(lat, lng, this.value);
        }
      }); 